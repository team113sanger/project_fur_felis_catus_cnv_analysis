import logging
import subprocess
from pathlib import Path

from utils.file_format_checker import is_bam, is_bed, is_fasta

logger = logging.getLogger(__name__)


# Helper functions
def run_command(command: str) -> None:
    """Run a given command using subprocess, including loggin statements and exception handling

    Args:
        command (str): Command to be executed
    """
    logger.debug(f"Executing command: {command}")
    try:
        command_result = subprocess.run(
            command, shell=True, capture_output=True, text=True
        )
        if command_result.returncode != 0:
            logger.error(f"Error in running {command}: {command_result.stderr}")
        else:
            logger.info(f"Successfully completed command: {command}")
    except Exception as e:
        logger.error(f"Exception occurred while running command: {str(e)}")


# CNVKit command wrappers
def run_cnvkit_access(reference_fasta: Path, outdir: Path) -> Path:
    """Run cnvkit.py acess on a given reference FASTA file

    Args:
        reference_fasta (Path): Path to the reference FASTA file
        outdir (Path): Path to directory where output file will be stored

    Returns:
        Path: Path to the output BED file containing sequence-accessible coordinates
    """
    logging.info("Preparing to run cnvkit.py access...")
    if is_fasta(reference_fasta):
        fasta_stem = reference_fasta.stem
        output_bed_name = f"access-{fasta_stem}.bed"
        output_bed_path = outdir / output_bed_name
        cmd = f"cnvkit.py access {str(reference_fasta)} -o {str(output_bed_path)}"

        run_command(cmd)
    else:
        raise ValueError(
            f"{str(reference_fasta)} is not a valid FASTA file. Check input data."
        )

    return Path(output_bed_path)


def run_cnvkit_autobin(
    bam_files: list[Path],
    baitset_bed: Path,
    access_bed: Path,
    refflat_file: Path,
    outdir: Path,
) -> dict[Path]:
    """Run cnvkit.py autobin to produce target and antitarget BED files

    Args:
        bam_files (list[Path]): Paths to BAM files
        baitset (Path): Path to the baitset BED file
        access_bed (Path): Path to the BED file generated by cnvkit.py access
        refflat (Path): Path to the refFlat gene annotation file
        outdir (Path): Path to directory where output files will be stored

    Returns:
        dict[Path]: A dictionary containing the target and antitarget BED files. Respective keys are 'target' and 'antitarget'
    """
    logging.info("Preparing to run cnvkit.py autobin...")
    # Validate input baitset BED and construct output BED paths
    if is_bed(baitset_bed):
        output_target_bed_name = baitset_bed.name.replace(".bed", ".target.bed")
        output_antitarget_bed_name = baitset_bed.name.replace(".bed", ".antitarget.bed")
        output_target_bed_path = outdir / output_target_bed_name
        output_antitarget_bed_path = outdir / output_antitarget_bed_name
    else:
        raise ValueError(
            f"{str(baitset_bed)} is not a valid BED file. Check input data"
        )

    # Validate input BAMs and construct BAM file string for cnvkit.py autobin command
    if all(is_bam(file) for file in bam_files):
        bam_files_as_string = map(str, bam_files)

    # Construct cnvkit.py autobin command
    cmd = (
        f'cnvkit.py autobin {" ".join(bam_files_as_string)} -t {str(baitset_bed)} '
        f"-g {str(access_bed)} --annotate {str(refflat_file)} "
        f"--target-output-bed {str(output_target_bed_path)} "
        f"--antitarget-output-bed {str(output_antitarget_bed_path)}"
    )

    # Run cnvkit.py autobin command
    run_command(cmd)

    # Create a dictionary containing cnvkit.py autobin output files
    target_bed_dict = dict()
    target_bed_dict["target"] = Path(output_target_bed_path)
    target_bed_dict["antitarget"] = Path(output_antitarget_bed_path)

    return target_bed_dict
