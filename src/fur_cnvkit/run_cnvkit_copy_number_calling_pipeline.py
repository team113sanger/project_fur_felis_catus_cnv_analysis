import argparse
import logging
from pathlib import Path
import typing as t

import pandas as pd

from fur_cnvkit.utils.fur_utils import (
    extract_metadata_files_from_parameter_json,
    get_sample_id_from_file_path,
    get_sample_ids_for_file_list,
    map_sample_ids_to_study_ids,
    split_file_list_by_sample_sex,
    get_sample_specific_files,
)
from fur_cnvkit.utils.cnvkit_utils import (
    run_cnvkit_batch,
    filter_unplaced_contigs_from_cnvkit_output_file,
    perform_mode_centring,
    run_cnvkit_genemetrics,
    filter_genemetrics_file,
    run_cnvkit_diagram,
    run_cnvkit_scatter,
)


def setup_logging():
    """
    Define logging configuration
    """
    logging.basicConfig(
        level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s"
    )


def parse_arguments():
    """
    Define and parse command line arguments
    """
    parser = argparse.ArgumentParser(
        description="Run the CNVkit copy number calling pipeline."
    )
    parser.add_argument(
        "-p",
        "--parameter_file",
        type=Path,
        required=True,
        help="Path to the parameter file. Ensure this is the parameter file generated by the generate_copy_number_reference.py script.",
    )
    parser.add_argument(
        "-m",
        "--male_reference",
        type=Path,
        required=True,
        help="Path to the male copy number reference file generated by the generate_copy_number_reference.py script.",
    )
    parser.add_argument(
        "-f",
        "--female_reference",
        type=Path,
        required=True,
        help="Path to the female copy number reference file generated by the generate_copy_number_reference.py script.",
    )
    parser.add_argument(
        "-s",
        "--studies",
        type=str,
        nargs="+",
        help="List of specific studies to process. If not provided, all studies will be processed.",
    )
    parser.add_argument(
        "-gt",
        "--gain_threshold",
        type=float,
        default=0.585,
        help="Log2(FC) threshold to call a given gene as a copy-number gain. The default (0.585) equates to a net copy-number gain i.e. 2 copies -> 3 copies",
    )
    parser.add_argument(
        "-lt",
        "--loss_threshold",
        type=float,
        default=-0.4,
        help="Log2(FC) threshold to call a given gene as a copy-number loss. The default (-0.4) equates to a net copy-number loss i.e. 2 copies -> 1 copy",
    )
    parser.add_argument(
        "-o", "--outdir", type=Path, required=True, help="Path to the output directory."
    )

    return parser.parse_args()


def perform_post_processing(
    sample_id: str,
    sample_cnvkit_batch_output_files: t.List[Path],
    sex: str,
    gain_threshold: float,
    loss_threshold: float,
    log2_shift_records: t.List[t.Dict[str, t.Any]],
    outdir: Path,
):
    """
    Perform post-processing on the CNVkit output files for a given sample.
    """
    logging.info(f"Performing CNVKit batch post-processing on sample {sample_id} ...")

    # Define the ratio and segment file
    ratio_file = next(
        f for f in sample_cnvkit_batch_output_files if f.name.endswith(".cnr")
    )
    segment_file = next(
        f
        for f in sample_cnvkit_batch_output_files
        if f.name.endswith(".cns") and "call" not in f.name and "bintest" not in f.name
    )

    logging.debug(f"Ratio file for sample {sample_id}: {ratio_file}")
    logging.debug(f"Segment file for sample {sample_id}: {segment_file}")

    # Explicitly call mode centring on the segment file
    mode_centred_segment_file, log2_shift_value = perform_mode_centring(
        segment_file, outdir
    )

    # Store log2 shift value
    log2_shift_records.append(
        {"Sample ID": sample_id, "Sex": sex, "Log2 Shift Value": log2_shift_value}
    )

    # Run cnvkit.py genemetrics
    logging.info(f"Running cnvkit.py genemetrics for sample {sample_id} ...")

    genemetrics_ratio_file = run_cnvkit_genemetrics(
        ratio_file=ratio_file,
        threshold=1e-9,  # Set very low so that all genes are in output file
        min_probes=3,
        output_prefix=sample_id,
        outdir=outdir,
        sex=sex,
    )

    genemetrics_segment_file = run_cnvkit_genemetrics(
        ratio_file=ratio_file,
        threshold=1e-9,
        min_probes=3,
        output_prefix=sample_id,
        outdir=outdir,
        sex=sex,
        segment_file=mode_centred_segment_file,
    )

    logging.debug(
        f"Genemetrics ratio file for sample {sample_id}: {genemetrics_ratio_file}"
    )
    logging.debug(
        f"Genemetrics segment file for sample {sample_id}: {genemetrics_segment_file}"
    )

    # Extract significant calls from genemetrics files
    logging.info(
        f"Filtering genemetrics files for sample {sample_id} to extract significant copy-number calls ..."
    )
    filtered_genemetrics_ratio_file = filter_genemetrics_file(
        genemetrics_file=genemetrics_ratio_file,
        lower_threshold=loss_threshold,
        upper_threshold=gain_threshold,
        outdir=outdir,
    )

    filtered_genemetrics_segment_file = filter_genemetrics_file(
        genemetrics_file=genemetrics_segment_file,
        lower_threshold=loss_threshold,
        upper_threshold=gain_threshold,
        outdir=outdir,
    )

    logging.debug(f"Filtered genemetrics ratio file: {filtered_genemetrics_ratio_file}")
    logging.debug(
        f"Filtered genemetrics segment file: {filtered_genemetrics_segment_file}"
    )

    # Run cnvkit.py diagram and scatter
    logging.info(f"Generating plots for sample {sample_id} ...")
    run_cnvkit_diagram(ratio_file, mode_centred_segment_file, outdir)
    run_cnvkit_scatter(ratio_file, mode_centred_segment_file, outdir)

    logging.info(f"Successfully processed sample {sample_id}.")

    return filtered_genemetrics_segment_file


def process_sample(
    sample_id: str,
    cnvkit_batch_output_files: t.List[Path],
    unplaced_contigs: t.List[str],
    sex: str,
    gain_threshold: float,
    loss_threshold: float,
    log2_shift_records: t.List[t.Dict[str, t.Any]],
    batch_outdir: Path,
):
    """
    Process an individual sample by filtering output files and performing post-processing.
    """
    logging.info(f"Processing sample {sample_id} ...")

    # Get the cnvkit.py batch output files that correspond to this sample
    sample_files = get_sample_specific_files(cnvkit_batch_output_files, sample_id)

    logging.debug(f"CNVKit batch output files for sample {sample_id}: {sample_files}")

    # Iterate through sample-specific files and remove lines corresponding to unplaced contigs to allow plotting
    for file in sample_files:
        if file.name.endswith(".pdf") or file.name.endswith(".png"):
            # We only want text-based files so we skip these types of file
            continue
        filter_unplaced_contigs_from_cnvkit_output_file(file, unplaced_contigs)

    # Perform post-processing steps on this sample
    sample_genemetrics_file = perform_post_processing(
        sample_id=sample_id,
        sample_cnvkit_batch_output_files=sample_files,
        sex=sex,
        gain_threshold=gain_threshold,
        loss_threshold=loss_threshold,
        log2_shift_records=log2_shift_records,
        outdir=batch_outdir,
    )

    return sample_genemetrics_file


def process_sex_group(
    sex: str,
    sex_tumour_bams: t.List[Path],
    study_outdir: Path,
    male_ref: Path,
    female_ref: Path,
    unplaced_contigs: t.List[str],
    gain_threshold: float,
    loss_threshold: float,
    sample_metadata_xlsx: Path,
    log2_shift_records: t.List[t.Dict[str, t.Any]],
):
    """
    Process a group of samples of the same sex.
    """
    logging.info(f"Running CNVkit copy number calling pipeline for {sex} samples...")
    copy_number_reference_file = male_ref if sex == "male" else female_ref
    logging.debug(f"Copy number reference file: {copy_number_reference_file}")

    batch_output_dir = run_cnvkit_batch(
        tumour_bams=sex_tumour_bams,
        copy_number_reference_file=copy_number_reference_file,
        outdir=study_outdir,
        sex=sex,
    )

    batch_output_files = [Path(f) for f in batch_output_dir.glob("*") if f.is_file()]
    sex_sample_ids = get_sample_ids_for_file_list(sex_tumour_bams)

    # Create a list to store the genemetrics files from these samples
    sex_genemetrics_files = []

    for sample_id in sex_sample_ids:
        sample_genemetrics_file = process_sample(
            sample_id,
            batch_output_files,
            unplaced_contigs,
            sex,
            gain_threshold,
            loss_threshold,
            log2_shift_records,
            batch_output_dir,
        )
        sex_genemetrics_files.append(sample_genemetrics_file)

    return sex_genemetrics_files


def generate_genemetrics_study_summary_csv(
    study_id: str,
    genemetrics_files: t.List[Path],
    baitset_genes_file: Path,
    outdir: Path,
) -> Path:
    logging.info(
        f"Generating study-level genemetrics summary CSV for study {study_id} ..."
    )

    # Construct output CSV path
    output_csv_file_name = study_id + ".genemetrics_study_summary.csv"
    output_csv_file_path = outdir / output_csv_file_name

    # Extract baitset gene symbols from baitset gene file
    logging.info(f"Extracting baitset gene symbols from {str(baitset_genes_file)} ...")
    with open(baitset_genes_file, "r") as f:
        baitset_genes_list = [line.strip() for line in f.readlines()]

    # Collect gene-level log2 data in a list of Series, one per sample
    sample_series_list = []

    # Set of UCSC labels to skip if they appear as "genes"
    skip_labels = {"none", "unk", "incmpl", "cmpl"}

    for genemetrics_file in genemetrics_files:
        sample_id = get_sample_id_from_file_path(genemetrics_file)
        logging.info(f"Processing file {genemetrics_file} for sample {sample_id} ...")

        # Use pandas to read the genemetrics file
        df_temp = pd.read_csv(
            genemetrics_file, sep="\t", usecols=[0, 4]  # gene and log2 columns
        )

        logging.debug(f"df_temp: {df_temp.head()}")

        # Skip any rows where the gene is in the skip list
        df_temp = df_temp[~df_temp["gene"].isin(skip_labels)]

        # Convert log2 column to float
        df_temp["log2"] = pd.to_numeric(df_temp["log2"], errors="coerce")

        # Make 'gene' the index
        df_temp.set_index("gene", inplace=True)

        # Reindex to ensure we have rows for all baitset_genes
        df_temp = df_temp.reindex(baitset_genes_list)

        # Create a Series, one per sample
        s = df_temp["log2"].rename(sample_id)

        logging.debug(f"s: {s}")
        sample_series_list.append(s)

    # Combine the sample-level Series into a cohort-level DataFrame
    cohort_df = pd.concat(sample_series_list, axis=1).T  # Samples=rows, Genes=columns

    # Export DataFrame to CSV
    cohort_df.to_csv(output_csv_file_path)
    logging.info(f"Cohort summary CSV created at {str(output_csv_file_path)}")

    return cohort_df


def process_study(
    study_id: str,
    sample_ids: t.List[str],
    tumour_bam_list: t.List[Path],
    sample_metadata_xlsx: Path,
    unplaced_contigs: t.List[str],
    male_ref: Path,
    female_ref: Path,
    baitset_genes_file: Path,
    gain_threshold: float,
    loss_threshold: float,
    outdir: Path,
):
    """
    Process a single study by running the CNVkit pipeline for its samples.
    """
    logging.info(f"Running CNVkit copy number calling pipeline for study {study_id}...")
    study_outdir = outdir / study_id
    study_outdir.mkdir(parents=True, exist_ok=True)

    # Filter the tumour BAMs that belong to this study.
    study_tumour_bams = [
        bam
        for bam in tumour_bam_list
        if any(sample_id in bam.name for sample_id in sample_ids)
    ]

    # Split the tumour BAMs according to their sex
    tumour_bam_sex_dict = split_file_list_by_sample_sex(
        study_tumour_bams, sample_metadata_xlsx
    )

    # Create a list to store mode-centred log2 shift values
    log2_shift_records: t.List[t.Dict[str, t.Any]] = []

    # Create a list to store genemetrics files for this study
    study_genemetrics_files: t.List[Path] = []

    for sex, sex_tumour_bams in tumour_bam_sex_dict.items():
        sex_genemetrics_files = process_sex_group(
            sex,
            sex_tumour_bams,
            study_outdir,
            male_ref,
            female_ref,
            unplaced_contigs,
            gain_threshold,
            loss_threshold,
            sample_metadata_xlsx,
            log2_shift_records,
        )

        study_genemetrics_files += sex_genemetrics_files

    # Before writing out the log2 shift values, check if the CSV already exists.
    log2_shift_csv_path = study_outdir / "log2_shift_values.csv"
    if log2_shift_csv_path.exists():
        logging.info(
            f"Found existing log2 shift CSV at {str(log2_shift_csv_path)}. Merging existing values..."
        )
        existing_df = pd.read_csv(log2_shift_csv_path)
        # Create a mapping from sample ID to shift value (skip entries that are NaN)
        existing_log2_dict = {
            row["Sample ID"]: row["Log2 Shift Value"]
            for _, row in existing_df.iterrows()
            if pd.notnull(row["Log2 Shift Value"])
        }
        # Update any new records with a missing (None) shift value from the existing dictionary
        for record in log2_shift_records:
            if (
                record["Log2 Shift Value"] is None
                and record["Sample ID"] in existing_log2_dict
            ):
                record["Log2 Shift Value"] = existing_log2_dict[record["Sample ID"]]

    # Write the log2 shift values to the CSV
    log2_shift_df = pd.DataFrame(log2_shift_records)
    log2_shift_df.to_csv(log2_shift_csv_path, index=False)
    logging.info(f"Log2 shift values saved to {log2_shift_csv_path}")

    # Create a cohort-level genemetrics summary CSV
    generate_genemetrics_study_summary_csv(
        study_id=study_id,
        genemetrics_files=study_genemetrics_files,
        baitset_genes_file=baitset_genes_file,
        outdir=outdir,
    )


def main():
    args = parse_arguments()
    parameter_file = args.parameter_file
    male_ref = args.male_reference
    female_ref = args.female_reference
    selected_studies = set(args.studies) if args.studies else None
    gain_threshold = args.gain_threshold
    loss_threshold = args.loss_threshold
    outdir = args.outdir

    logging.debug(f"Parameter file: {parameter_file}")
    logging.debug(f"Male copy number reference: {male_ref}")
    logging.debug(f"Female copy number reference: {female_ref}")
    logging.debug(f"Selected studies: {selected_studies}")
    logging.debug(f"Gain threshold: {gain_threshold}")
    logging.debug(f"Loss threshold: {loss_threshold}")
    logging.debug(f"Output directory: {outdir}")

    logging.info("Running CNVkit copy number calling pipeline...")

    # Extract metadata files from the parameter file.
    metadata = extract_metadata_files_from_parameter_json(parameter_file)
    tumour_bam_list = metadata["tumour_bams"]
    sample_metadata_xlsx = metadata["sample_metadata_xlsx"]
    unplaced_contigs = metadata["unplaced_contig_prefixes"]
    baitset_genes_file = metadata["baitset_genes_file"]

    logging.debug(f"Tumour BAMs: {tumour_bam_list}")
    logging.debug(f"Sample metadata: {sample_metadata_xlsx}")
    logging.debug(f"Unplaced contigs: {unplaced_contigs}")

    # Map tumour samples to their respective studies.
    tumour_sample_ids = get_sample_ids_for_file_list(tumour_bam_list)
    study_ids_to_sample_ids = map_sample_ids_to_study_ids(
        tumour_sample_ids, sample_metadata_xlsx
    )

    # Ensure that the selected studies exist in the metadata.
    if selected_studies and not selected_studies.issubset(
        set(study_ids_to_sample_ids.keys())
    ):
        missing_studies = selected_studies - set(study_ids_to_sample_ids.keys())
        raise ValueError(
            f"The following selected studies were not found in the metadata spreadsheet: {', '.join(missing_studies)}"
        )

    # Process each study.
    for study_id, sample_ids in study_ids_to_sample_ids.items():
        if selected_studies and study_id not in selected_studies:
            continue
        process_study(
            study_id,
            sample_ids,
            tumour_bam_list,
            sample_metadata_xlsx,
            unplaced_contigs,
            male_ref,
            female_ref,
            baitset_genes_file,
            gain_threshold,
            loss_threshold,
            outdir,
        )


if __name__ == "__main__":
    setup_logging()
    main()
