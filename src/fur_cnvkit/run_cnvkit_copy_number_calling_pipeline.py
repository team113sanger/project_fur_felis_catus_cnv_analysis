import argparse
import logging
from pathlib import Path

from fur_cnvkit.utils.fur_utils import (
    extract_metadata_files_from_parameter_json,
    get_sample_ids_for_file_list,
    map_sample_ids_to_study_ids,
    split_file_list_by_sample_sex,
)
from fur_cnvkit.utils.cnvkit_utils import (
    run_cnvkit_batch,
    filter_unplaced_contigs_from_cnvkit_output_file,
)


def setup_logging():
    """
    Define logging configuration
    """
    logging.basicConfig(
        level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s"
    )


def parse_arguments():
    """
    Define and parse command line arguments
    """
    parser = argparse.ArgumentParser(
        description="Run the CNVkit copy number calling pipeline."
    )
    parser.add_argument(
        "-p",
        "--parameter_file",
        type=Path,
        required=True,
        help="Path to the parameter file. Ensure this is the parameter file generated by the generate_copy_number_reference.py script.",
    )
    parser.add_argument(
        "-m",
        "--male_reference",
        type=Path,
        required=True,
        help="Path to the male copy number reference file generated by the generate_copy_number_reference.py script.",
    )
    parser.add_argument(
        "-f",
        "--female_reference",
        type=Path,
        required=True,
        help="Path to the female copy number reference file generated by the generate_copy_number_reference.py script.",
    )
    parser.add_argument(
        "-o", "--outdir", type=Path, required=True, help="Path to the output directory."
    )

    return parser.parse_args()


def perform_post_processing():
    """
    Perform post-processing on the CNVkit output files
    """
    pass


def main():
    args = parse_arguments()
    parameter_file = args.parameter_file
    male_copy_number_reference_file = args.male_reference
    female_copy_number_reference_file = args.female_reference
    outdir = args.outdir

    logging.debug(f"Parameter file: {parameter_file}")
    logging.debug(f"Male copy number reference: {male_copy_number_reference_file}")
    logging.debug(f"Female copy number reference: {female_copy_number_reference_file}")
    logging.debug(f"Output directory: {outdir}")

    logging.info("Running CNVkit copy number calling pipeline...")

    # Extract metadata files from parameter file
    metadata = extract_metadata_files_from_parameter_json(parameter_file)
    tumour_bam_list = metadata["tumour_bams"]
    sample_metadata_xlsx = metadata["sample_metadata_xlsx"]
    unplaced_contigs = metadata["unplaced_contig_prefixes"]

    logging.debug(f"Tumour BAMs: {tumour_bam_list}")
    logging.debug(f"Sample metadata: {sample_metadata_xlsx}")
    logging.debug(f"Unplaced contigs: {unplaced_contigs}")

    # Map tumour samples to their respective studies
    tumour_sample_ids = get_sample_ids_for_file_list(tumour_bam_list)
    study_ids_to_sample_ids = map_sample_ids_to_study_ids(
        tumour_sample_ids, sample_metadata_xlsx
    )

    # Iterate through each study and run the CNVkit copy number calling pipeline
    for study_id, sample_ids in study_ids_to_sample_ids.items():
        logging.info(
            f"Running CNVkit copy number calling pipeline for study {study_id}..."
        )

        # Create a directory for this study
        study_outdir = outdir / study_id
        study_outdir.mkdir(parents=True, exist_ok=True)

        # Get the tumour BAMs for the current study
        tumour_bams = [
            bam
            for bam in tumour_bam_list
            if any(sample_id in bam.name for sample_id in sample_ids)
        ]

        # Seperate the tumour BAMs by sex
        tumour_bam_sex_dict = split_file_list_by_sample_sex(
            tumour_bams, sample_metadata_xlsx
        )

        # Iterate through each sex and run the CNVkit copy number calling pipeline
        for sex, tumour_bams in tumour_bam_sex_dict.items():
            logging.info(
                f"Running CNVkit copy number calling pipeline for {sex} samples..."
            )

            # Get the copy number reference file for the current sex
            copy_number_reference_file = (
                male_copy_number_reference_file
                if sex == "male"
                else female_copy_number_reference_file
            )
            logging.debug(f"Copy number reference file: {copy_number_reference_file}")

            # Run the CNVkit copy number calling pipeline
            cnvkit_batch_output_directory = run_cnvkit_batch(
                tumour_bams=tumour_bams,
                copy_number_reference_file=copy_number_reference_file,
                outdir=study_outdir,
                sex=sex,
            )

            # Filter the CNVkit output files to remove unplaced contigs
            cnvkit_batch_output_files = [
                Path(f) for f in cnvkit_batch_output_directory.glob("*") if f.is_file()
            ]
            for cnvkit_output_file in cnvkit_batch_output_files:
                filter_unplaced_contigs_from_cnvkit_output_file(
                    cnvkit_output_file, unplaced_contigs
                )

            # Iterate through each sample and perform post-processing


if __name__ == "__main__":
    setup_logging()
    main()
